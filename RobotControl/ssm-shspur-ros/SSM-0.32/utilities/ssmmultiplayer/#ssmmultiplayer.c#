#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <math.h>
#include <sys/times.h>
#include <sys/time.h>
#include <errno.h>
#include <time.h>
#include "ymbc_time.h"
#include "ssm_common.h"

#define OPECODE 1
#define OPERAND 8

#define OPERAND_NAME 9
#define OPERAND_SUID 10
#define OPERAND_SIZE 11
#define MAX_SENSOR_NUM 20

#define TABLE_SIZE 4*100  //100[min]
#define TABLE_INTERVAL 15 //[s]

#define READ_DATA 0
#define WRITE_DATA 1
#define END_OF_FILE 2

typedef struct{
  char name[1000];
  char logname[1000];
  FILE *log_file;
  int suid;
  int size;
  int property_size;
  int log_num;
  int status;
  int count;
  int num;
  int tnum;
  int total;
  double cycle;
  SSM_sid sid;
  char *buf;
  char *prop_buf;
  double time;
}Sensor_log;

Sensor_log sensors[MAX_SENSOR_NUM];
int g_log_num;
int g_verbose;
int g_newtype = 1;
double g_speed,g_write_speed;


int arg_analysis(int argc, char* argv[])
{
  int i;
  i = 1;

  while(i < argc){
    if(argv[i][0] == '-'){      
      if(strcmp(argv[i]+1, "help")==0 || strcmp(argv[i]+1, "h")==0){
	printf("ssmmultiplayer <log1> <log2> ... <log10> \n");
	printf("ssmmultiplayer logdir/* \n");
	printf("Options \n");
	printf("-old,     -o:  old type format\n");
	printf("-verbose, -v:  show debug messages\n");
	printf("-speed,   -x:  speed up, log time\n");
	printf("-rspeed, -rx:  speed up, real time\n");

	i+=1;
      }else if(strcmp(argv[i]+1, "old")==0 || strcmp(argv[i]+1, "o")==0){
        g_newtype = 0;
	i+=1;
      }else if(strcmp(argv[i]+1, "verbose")==0 || strcmp(argv[i]+1, "v")==0){
        g_verbose = 1;
	i+=1;
      }else if(i+1 < argc){
	if(strcmp(argv[i]+1, "speed")==0 || strcmp(argv[i]+1, "x")==0){
	  g_speed=strtod(argv[i+1],0);
	  g_write_speed = 1;
	  printf("suid[%f]\n",g_speed);
	  i+=2;
	}else if(strcmp(argv[i]+1, "rspeed")==0 || strcmp(argv[i]+1, "rx")==0){
	  g_speed=strtod(argv[i+1],0);
	  g_write_speed = g_speed;
	  printf("suid[%f]\n",g_speed);
	  i+=2;
	}else{
	  /*err*/
	  printf("argument error.\n");
	  return -1;
	}
      }else{
        /*err*/
	printf("argument error.\n");
	return -1;
      }
    }else{
      strcpy(sensors[g_log_num].logname, argv[i]);
      printf("logname[%s]\n",sensors[g_log_num].logname);
      g_log_num++;
      i++;
    }
  }

  return 0;
}

int main(int argc,char* argv[])
{
  int i,stopped;
  double ini_log_time,ini_real_time, before_print_time;
  int working,total_data;
  char dummy;

  /*initialize log data*/
  g_log_num = 0;
  g_speed = 1;
  g_verbose = 0;
  working = 0;
  before_print_time = 0;

  if(arg_analysis(argc, argv)<0){
    printf("quit\n");
    return 0;
  }
  if(g_log_num == 0 || g_log_num > MAX_SENSOR_NUM)return 0;

  if(!initSSM()){
    printf("init error\n");
    return 0;
  }

  /*read all sensor log information and create ssm data*/
  for(i = 0;i < g_log_num;i++){
    /*open log file*/
    if(!(sensors[i].log_file = fopen(sensors[i].logname,"r"))){
      printf("file error.\n");
      return 0; 
    }
    
    /*read log information*/
    if(g_newtype){
      fscanf(sensors[i].log_file,"%s %d %d %d %lf %lf %d",
	       sensors[i].name, &sensors[i].suid, &sensors[i].size,
	       &sensors[i].num, &sensors[i].cycle,&sensors[i].time,
	       &sensors[i].property_size);
      if(i == 0){
	ini_log_time = sensors[i].time;
	ini_real_time = gettimeSSM();
      }

      fread(&dummy, 1, 1, sensors[i].log_file);
      printf("%s %d %d %d %lf %lf %d\n",
	     sensors[i].name, sensors[i].suid, sensors[i].size,
	     sensors[i].num, sensors[i].cycle, sensors[i].time,
	     sensors[i].property_size);
    }else{
      fscanf(sensors[i].log_file,"%s %d %d %d %d %lf %lf",
	     sensors[i].name, &sensors[i].suid, &sensors[i].size,
	     &sensors[i].num, &sensors[i].tnum, &sensors[i].cycle,&sensors[i].time);
      if(i == 0){
	ini_log_time = sensors[i].time;
	ini_real_time = gettimeSSM();
      }
      fread(&dummy, 1, 1, sensors[i].log_file);
      printf("%s %d %d %d %d %lf %lf\n",
	     sensors[i].name, sensors[i].suid, sensors[i].size,
	     sensors[i].num,sensors[i].tnum, sensors[i].cycle,sensors[i].time);
    }


    /*get memory space for buffer*/
    if(!(sensors[i].buf = malloc(sensors[i].size))){
      printf("malloc error.\n");
      return 0;
    }
    
    if(!(sensors[i].prop_buf = malloc(sensors[i].property_size))){
      printf("property malloc error.\n");
      return 0;
    }
    
    /*compute initial time*/
    /*    if(i==0){
      ini_log_time = ini_log_time;//-gettimeSSM()*g_speed;
      ini_real_time = gettimeSSM();
      }*/

    /*create ssm data*/
    sensors[i].sid = createSSM_time(sensors[i].name,
				    sensors[i].suid, 
				    sensors[i].size, 
				    sensors[i].num*sensors[i].cycle ,
				    sensors[i].cycle);
    if(sensors[i].sid == 0){
      printf("Such sensor is not registerd.\n");
      return 0;
    }
    if(sensors[i].property_size > 0){
      fread(sensors[i].prop_buf, sensors[i].property_size, 1,
	    sensors[i].log_file);
      set_propertySSM(sensors[i].name, sensors[i].suid, sensors[i].prop_buf,
		      sensors[i].property_size);
    }
    sensors[i].status = READ_DATA;
    sensors[i].count = 0;
    sensors[i].total = 0;
  }

  /*set time*/
  settimeSSM(sensors[0].time, g_speed);

  /*output log data*/
  stopped = 0;
  while(stopped != g_log_num){
    working= 0;
    for(i = 0;i < g_log_num;i++){
      if(sensors[i].status == READ_DATA){
	if(fread(&sensors[i].time, sizeof(double), 1, sensors[i].log_file)<1){
	  sensors[i].status = END_OF_FILE;
	  stopped++;
	  continue;
	} 
	if(fread(sensors[i].buf, sensors[i].size, 1, sensors[i].log_file) <1){
	  sensors[i].status = END_OF_FILE;
	  stopped++;
	  continue;
	}

	sensors[i].status = WRITE_DATA;
      }
      if(sensors[i].status == WRITE_DATA){
	//	if(   gettimeSSM()-ini_real_time
	//  < (sensors[i].time-ini_log_time)/g_speed)continue;
	if( gettimeSSM() < sensors[i].time)continue;
	/*write*/	
	writeSSM_time(sensors[i].sid,sensors[i].buf,sensors[i].time);
	//		      ini_real_time+(sensors[i].time-ini_log_time)
	//	      /g_write_speed);
	sensors[i].count++;
	sensors[i].total++;
	sensors[i].status = READ_DATA;
	total_data+=sensors[i].size+sizeof(double);
	working++;
      }
    }

    if(working == 0)usleep(10000);
    if(before_print_time + 1 < gettimeSSM()){
      before_print_time = gettimeSSM();
      /*print*/
      printf("-------------%f----------------\n",gettimeSSM());
      for(i = 0;i < g_log_num;i++){
	printf("%s[%d] total %d(%d[count/s])\n",
	       sensors[i].name,sensors[i].suid,
	       sensors[i].total,sensors[i].count);
	sensors[i].count = 0;
      }
      printf("total %4.2f MB/s \n",(double)total_data/(1024.0*1024.0));
      total_data = 0;
    }

  }

  settimeSSM(0,0);

  /*finalize log data*/
  for(i = 0;i < g_log_num;i++){
    fclose(sensors[i].log_file);
    free(sensors[i].buf);  
    free(sensors[i].prop_buf);  
  }
  return 0;
}
